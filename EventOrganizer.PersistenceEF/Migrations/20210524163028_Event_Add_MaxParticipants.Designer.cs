// <auto-generated />
using System;
using EventOrganizer.PersistenceEF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EventOrganizer.PersistenceEF.Migrations
{
    [DbContext(typeof(EventOrganizerContext))]
    [Migration("20210524163028_Event_Add_MaxParticipants")]
    partial class Event_Add_MaxParticipants
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EventOrganizer.Domain.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Przedstawimy zagadnienia, które będą wprowadzeniami do głębszego poznawania RESTful APIs.\r\n                    Pierwsze spotkanie będzie wstępem i przedstawieniemz szerszej perspektywy, kontekstu, do którego wrócimy \r\n                    na ostatnim spotkaniu z cyklu. Taka agendowa klamra wyczerpie temat RESTful API na wieki, a przynajmniej \r\n                    do kolejnego nowego pomysłu, zmiany wprowadzonej w świat IT.",
                            Duration = new TimeSpan(0, 2, 0, 0, 0),
                            MaxParticipants = 2,
                            StartDate = new DateTime(2021, 7, 24, 18, 30, 26, 312, DateTimeKind.Local).AddTicks(4210),
                            Title = "Restful API, wszystkoco powinieneś wiedzieć."
                        },
                        new
                        {
                            Id = 2,
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut eu felis mattis, viverra nibh in,\r\n                    condimentum ex. In hac habitasse platea dictumst. Pellentesque sodales vestibulum odio, et tempus leo faucibus pellentesque.  \r\n                    Cras mattis gravida mauris sit amet accumsan. Nunc vitae fermentum metus, nec tempus massa. \r\n                    Proin pulvinar elit eu mauris pharetra placerat. Proin ullamcorper hendrerit mi ac lacinia. \r\n                    Quisque elementum aliquet diam non eleifend. Curabitur ultrices mi enim, aliquet lacinia est fermentum et. Cras ut lorem risus.",
                            Duration = new TimeSpan(0, 4, 0, 0, 0),
                            MaxParticipants = 0,
                            StartDate = new DateTime(2021, 8, 24, 18, 30, 26, 320, DateTimeKind.Local).AddTicks(3867),
                            Title = "Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut eu felis mattis, viverra nibh in,\r\n                    condimentum ex. In hac habitasse platea dictumst. Pellentesque sodales vestibulum odio, et tempus leo faucibus pellentesque.  \r\n                    Cras mattis gravida mauris sit amet accumsan. Nunc vitae fermentum metus, nec tempus massa. \r\n                    Proin pulvinar elit eu mauris pharetra placerat. Proin ullamcorper hendrerit mi ac lacinia. \r\n                    Quisque elementum aliquet diam non eleifend. Curabitur ultrices mi enim, aliquet lacinia est fermentum et. Cras ut lorem risus.",
                            Duration = new TimeSpan(0, 2, 15, 0, 0),
                            MaxParticipants = 2,
                            StartDate = new DateTime(2021, 10, 24, 18, 30, 26, 320, DateTimeKind.Local).AddTicks(4016),
                            Title = "Docker niech Twoja firma wypłynie na szerokie wody"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut eu felis mattis, viverra nibh in,\r\n                    condimentum ex. In hac habitasse platea dictumst. Pellentesque sodales vestibulum odio, et tempus leo faucibus pellentesque.  \r\n                    Cras mattis gravida mauris sit amet accumsan. Nunc vitae fermentum metus, nec tempus massa. \r\n                    Proin pulvinar elit eu mauris pharetra placerat. Proin ullamcorper hendrerit mi ac lacinia. \r\n                    Quisque elementum aliquet diam non eleifend. Curabitur ultrices mi enim, aliquet lacinia est fermentum et. Cras ut lorem risus.",
                            Duration = new TimeSpan(0, 2, 30, 0, 0),
                            MaxParticipants = 3,
                            StartDate = new DateTime(2021, 8, 30, 18, 30, 26, 320, DateTimeKind.Local).AddTicks(4035),
                            Title = "JavaScript, TypeScript, czy może jakiś framework?"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut eu felis mattis, viverra nibh in,\r\n                    condimentum ex. In hac habitasse platea dictumst. Pellentesque sodales vestibulum odio, et tempus leo faucibus pellentesque.  \r\n                    Cras mattis gravida mauris sit amet accumsan. Nunc vitae fermentum metus, nec tempus massa. \r\n                    Proin pulvinar elit eu mauris pharetra placerat. Proin ullamcorper hendrerit mi ac lacinia. \r\n                    Quisque elementum aliquet diam non eleifend. Curabitur ultrices mi enim, aliquet lacinia est fermentum et. Cras ut lorem risus.",
                            Duration = new TimeSpan(0, 3, 45, 0, 0),
                            MaxParticipants = 3,
                            StartDate = new DateTime(2021, 9, 13, 23, 30, 26, 320, DateTimeKind.Local).AddTicks(4073),
                            Title = "ADO.NET bo Entity Framework już nie wystarcza, a być może nigdy nie wystarczał."
                        },
                        new
                        {
                            Id = 6,
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut eu felis mattis, viverra nibh in,\r\n                        condimentum ex. In hac habitasse platea dictumst. Pellentesque sodales vestibulum odio, et tempus leo faucibus pellentesque.  \r\n                        Cras mattis gravida mauris sit amet accumsan. Nunc vitae fermentum metus, nec tempus massa. \r\n                        Proin pulvinar elit eu mauris pharetra placerat. Proin ullamcorper hendrerit mi ac lacinia. \r\n                        Quisque elementum aliquet diam non eleifend. Curabitur ultrices mi enim, aliquet lacinia est fermentum et. Cras ut lorem risus.",
                            Duration = new TimeSpan(0, 3, 45, 0, 0),
                            MaxParticipants = 25,
                            StartDate = new DateTime(2021, 9, 13, 23, 30, 26, 320, DateTimeKind.Local).AddTicks(4099),
                            Title = "Seeding data to test MaxParticipants prop - it doesn't have tied real participants"
                        });
                });

            modelBuilder.Entity("EventOrganizer.Domain.Entities.EventParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("EventsParticipants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EventId = 1,
                            ParticipantId = 1
                        },
                        new
                        {
                            Id = 2,
                            EventId = 3,
                            ParticipantId = 1
                        },
                        new
                        {
                            Id = 3,
                            EventId = 5,
                            ParticipantId = 1
                        },
                        new
                        {
                            Id = 4,
                            EventId = 2,
                            ParticipantId = 2
                        },
                        new
                        {
                            Id = 5,
                            EventId = 5,
                            ParticipantId = 3
                        },
                        new
                        {
                            Id = 6,
                            EventId = 4,
                            ParticipantId = 3
                        },
                        new
                        {
                            Id = 7,
                            EventId = 3,
                            ParticipantId = 3
                        },
                        new
                        {
                            Id = 8,
                            EventId = 1,
                            ParticipantId = 4
                        },
                        new
                        {
                            Id = 9,
                            EventId = 5,
                            ParticipantId = 4
                        });
                });

            modelBuilder.Entity("EventOrganizer.Domain.Entities.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Participants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "maria@gmail.com",
                            Name = "Maria"
                        },
                        new
                        {
                            Id = 2,
                            Email = "tomek@gmail.com",
                            Name = "Tomek"
                        },
                        new
                        {
                            Id = 3,
                            Email = "lili@gmail.com",
                            Name = "Lili"
                        },
                        new
                        {
                            Id = 4,
                            Email = "kasia@gmail.com",
                            Name = "Kasia"
                        });
                });

            modelBuilder.Entity("EventOrganizer.Domain.Entities.EventParticipant", b =>
                {
                    b.HasOne("EventOrganizer.Domain.Entities.Event", "Event")
                        .WithMany("EventParticipants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventOrganizer.Domain.Entities.Participant", "Participant")
                        .WithMany("EventParticipants")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("EventOrganizer.Domain.Entities.Event", b =>
                {
                    b.Navigation("EventParticipants");
                });

            modelBuilder.Entity("EventOrganizer.Domain.Entities.Participant", b =>
                {
                    b.Navigation("EventParticipants");
                });
#pragma warning restore 612, 618
        }
    }
}
